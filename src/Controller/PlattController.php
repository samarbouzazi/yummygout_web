<?php

namespace App\Controller;

use App\Entity\Categorie;
use App\Entity\Platt;
use App\Form\CategoriesType;
use App\Form\PlatType;
use App\Repository\CategorieRepository;
use App\Repository\PlattRepository;

use CMEN\GoogleChartsBundle\GoogleCharts\Charts\PieChart;
use Doctrine\ORM\EntityManagerInterface;

use Dompdf\Dompdf;
use Dompdf\Options;
use MercurySeries\FlashyBundle\FlashyNotifier;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\HttpFoundation\Request;


class PlattController extends AbstractController
{
    /**
     * @Route("/platt", name="app_platt")
     */
    public function index(): Response
    {
        return $this->render('platt/index.html.twig', [
            'controller_name' => 'PlattController',
        ]);
    }
    /**
     * @Route("/affpClassfront", name="affpClassfront")
     */


    public function afficherfF(PlattRepository $repository ,CategorieRepository $repcat)
    {
        $plattt = $repository->findAll();
        $categ=$repcat->findAll();


    public function afficherfF(PlattRepository $repository ,CategorieRepository $repcat)
    {
        $plattt = $repository->findAll();
        $categ=$repcat->findAll();


        return $this->render('platt/AfficherFront.html.twig', ['plat' => $plattt , 'cat' => $categ]);

    }
    /**
     * @Route("/affpClass", name="affpClass")
     */

    public function afficher(PlattRepository $repository)
    {
        $plattt = $repository->findAll();
        return $this->render('platt/Afficher.html.twig', ['plat' => $plattt]);

    }



    /**
     * @Route("/affpClassfronta/{id}", name="affpClassfronta")
     */

    public function afficherF($id,PlattRepository $repository ,CategorieRepository $repcat)
    {
        $plattt = $repository->find($id);
        $categ=$repcat->findAll();

        return $this->render('platt/AfficherFront.html.twig', ['plat' => $plattt , 'cat' => $categ]);

    }




    /**
     * @Route ("/dp/{id}",name="dp1")
     */
    public function supprimer1($id, PlattRepository $repository,FlashyNotifier $flashy)
    {
        $plat = $repository->find($id);
        $em = $this->getDoctrine()->getManager();
        $em->remove($plat);
        $em->flush();
        $flashy->warning('Suppression Avec Succès!');

        return $this->redirectToRoute('affpClass');
    }


    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    /**
     * @Route ("/plat/addp",name="addp")
     */

    public function add(Request $request,FlashyNotifier $flashy)
    {
        $plat = new Platt();
        $form = $this->createForm(PlatType::class, $plat);
        $form->add('Ajouter', SubmitType::class);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $plat->setImage($fileName);
            $em = $this->getDoctrine()->getManager();
            $em->persist($plat);
            $em->flush();
            $flashy->success('Ajout Avec Succès!');
            return $this->redirectToRoute('affpClass');
        }
        return $this->render('platt/Addp.html.twig', [
            'formp' => $form->createView()
        ]);

    }

    /**
     * @Route ("/plat/updatep/{id}",name="updatep")
     */
    public function update(PlattRepository $repository, $id, Request $request,FlashyNotifier $flashy)
    {
        $plat = $repository->find($id);
        $form = $this->createForm(PlatType::class, $plat);
        $form->add('update', SubmitType::class);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $plat->setImage($fileName);
            $em = $this->getDoctrine()->getManager();
            $em->flush();
            $flashy->info('Modification Avec Succès!');
            return $this->redirectToRoute("affpClass");
        }
        return $this->render('platt/updatep.html.twig', [
            'formpp' => $form->createView()
        ]);
    }

    /**
     * @Route("/affptdej", name="affptdej")
     */

    public function afficherbyptdej(PlattRepository $repository)
    {
        $ptdej = $repository->listProByptdej();
        return $this->render('platt/AfficherFront.html.twig',
            ['plat' => $ptdej]);

    }
    /**
     * @Route("/affcatff/{id}", name="affcatff")
     */
    public function afficherc($id,CategorieRepository $repository)
    {
        $catt = $repository->find($id);
        return $this->render('platt/Affiche.html.twig', ['Cat' => $catt]);

    }
    /**
     * @Route("/pdf", name="PDF", methods={"GET"})
     */
    public function pdf(PlattRepository $plattRepository)
    {
        // Configure Dompdf according to your needs
        $pdfOptions = new Options();
        $pdfOptions->set('defaultFont', 'Arial');

        // Instantiate Dompdf with our options

        //l'image est située au niveau du dossier public
        $png = file_get_contents("l.png");
        $pngbase64 = base64_encode($png);
        // Retrieve the HTML generated in our twig file
        $html = $this->renderView('platt/affichepdf.html.twig', [
            "img64"=>$pngbase64,
            'plat' => $plattRepository->findAll()
        ]);

        // Load HTML to Dompdf
        $dompdf->loadHtml($html);

        // (Optional) Setup the paper size and orientation 'portrait' or 'portrait'
        $dompdf->setPaper('A4', 'portrait');

        // Render the HTML as PDF
        $dompdf->render();

        // Output the generated PDF to Browser (force download)
        $dompdf->stream("ListeDesplats.pdf", [

            "plat" => true,
        ]);
    }

    /**
     * @Route("/trit", name="trit")
     */
    public function OrderBytel(PlattRepository $repository,Request $requestr)
    {
        $four = $repository->orderBynom();

        return $this->render('Platt/Afficher.html.twig',
            ['plat' => $four]);
    }

    /**
     * @Route("/tritt", name="tritt")
     */
    public function OrderBydesc(PlattRepository $repository,Request $requestr)
    {
        $four = $repository->orderBydesc();

        return $this->render('Platt/Afficher.html.twig',
            ['plat' => $four]);
    }

    /**
     * @Route("/trittt", name="trittt")
     */
    public function OrderByprix(PlattRepository $repository,Request $requestr)
    {
        $four = $repository->orderByprixPlat();

        return $this->render('Platt/Afficher.html.twig',
            ['plat' => $four]);
    }

        // Retrieve the HTML generated in our twig file
        $html = $this->renderView('platt/affichepdf.html.twig', [
            'plat' => $plattRepository->findAll(),
        ]);

        // Load HTML to Dompdf
        $dompdf->loadHtml($html);
        // (Optional) Setup the paper size and orientation 'portrait' or 'portrait'
        $dompdf->setPaper('A4', 'portrait');

        // Render the HTML as PDF
        $dompdf->render();
        // Output the generated PDF to Browser (inline view)
        $dompdf->stream("ListeDesplats.pdf", [
            "plat" => true
        ]);
    }

}
